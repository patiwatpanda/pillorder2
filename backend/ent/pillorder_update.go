// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/patiwatpanda/app/ent/dentist"
	"github.com/patiwatpanda/app/ent/employee"
	"github.com/patiwatpanda/app/ent/patient"
	"github.com/patiwatpanda/app/ent/pillorder"
	"github.com/patiwatpanda/app/ent/pillorderitem"
	"github.com/patiwatpanda/app/ent/predicate"
)

// PillorderUpdate is the builder for updating Pillorder entities.
type PillorderUpdate struct {
	config
	hooks      []Hook
	mutation   *PillorderMutation
	predicates []predicate.Pillorder
}

// Where adds a new predicate for the builder.
func (pu *PillorderUpdate) Where(ps ...predicate.Pillorder) *PillorderUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPillorderNameID sets the PillorderNameID field.
func (pu *PillorderUpdate) SetPillorderNameID(s string) *PillorderUpdate {
	pu.mutation.SetPillorderNameID(s)
	return pu
}

// SetPillorderDate sets the PillorderDate field.
func (pu *PillorderUpdate) SetPillorderDate(t time.Time) *PillorderUpdate {
	pu.mutation.SetPillorderDate(t)
	return pu
}

// SetEmployeeID sets the employee edge to Employee by id.
func (pu *PillorderUpdate) SetEmployeeID(id int) *PillorderUpdate {
	pu.mutation.SetEmployeeID(id)
	return pu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (pu *PillorderUpdate) SetNillableEmployeeID(id *int) *PillorderUpdate {
	if id != nil {
		pu = pu.SetEmployeeID(*id)
	}
	return pu
}

// SetEmployee sets the employee edge to Employee.
func (pu *PillorderUpdate) SetEmployee(e *Employee) *PillorderUpdate {
	return pu.SetEmployeeID(e.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (pu *PillorderUpdate) SetPatientID(id int) *PillorderUpdate {
	pu.mutation.SetPatientID(id)
	return pu
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (pu *PillorderUpdate) SetNillablePatientID(id *int) *PillorderUpdate {
	if id != nil {
		pu = pu.SetPatientID(*id)
	}
	return pu
}

// SetPatient sets the patient edge to Patient.
func (pu *PillorderUpdate) SetPatient(p *Patient) *PillorderUpdate {
	return pu.SetPatientID(p.ID)
}

// SetDentistID sets the dentist edge to Dentist by id.
func (pu *PillorderUpdate) SetDentistID(id int) *PillorderUpdate {
	pu.mutation.SetDentistID(id)
	return pu
}

// SetNillableDentistID sets the dentist edge to Dentist by id if the given value is not nil.
func (pu *PillorderUpdate) SetNillableDentistID(id *int) *PillorderUpdate {
	if id != nil {
		pu = pu.SetDentistID(*id)
	}
	return pu
}

// SetDentist sets the dentist edge to Dentist.
func (pu *PillorderUpdate) SetDentist(d *Dentist) *PillorderUpdate {
	return pu.SetDentistID(d.ID)
}

// SetPillorderitemID sets the pillorderitem edge to PillorderItem by id.
func (pu *PillorderUpdate) SetPillorderitemID(id int) *PillorderUpdate {
	pu.mutation.SetPillorderitemID(id)
	return pu
}

// SetNillablePillorderitemID sets the pillorderitem edge to PillorderItem by id if the given value is not nil.
func (pu *PillorderUpdate) SetNillablePillorderitemID(id *int) *PillorderUpdate {
	if id != nil {
		pu = pu.SetPillorderitemID(*id)
	}
	return pu
}

// SetPillorderitem sets the pillorderitem edge to PillorderItem.
func (pu *PillorderUpdate) SetPillorderitem(p *PillorderItem) *PillorderUpdate {
	return pu.SetPillorderitemID(p.ID)
}

// Mutation returns the PillorderMutation object of the builder.
func (pu *PillorderUpdate) Mutation() *PillorderMutation {
	return pu.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (pu *PillorderUpdate) ClearEmployee() *PillorderUpdate {
	pu.mutation.ClearEmployee()
	return pu
}

// ClearPatient clears the patient edge to Patient.
func (pu *PillorderUpdate) ClearPatient() *PillorderUpdate {
	pu.mutation.ClearPatient()
	return pu
}

// ClearDentist clears the dentist edge to Dentist.
func (pu *PillorderUpdate) ClearDentist() *PillorderUpdate {
	pu.mutation.ClearDentist()
	return pu
}

// ClearPillorderitem clears the pillorderitem edge to PillorderItem.
func (pu *PillorderUpdate) ClearPillorderitem() *PillorderUpdate {
	pu.mutation.ClearPillorderitem()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PillorderUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.PillorderNameID(); ok {
		if err := pillorder.PillorderNameIDValidator(v); err != nil {
			return 0, &ValidationError{Name: "PillorderNameID", err: fmt.Errorf("ent: validator failed for field \"PillorderNameID\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PillorderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PillorderUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PillorderUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PillorderUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PillorderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pillorder.Table,
			Columns: pillorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pillorder.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PillorderNameID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pillorder.FieldPillorderNameID,
		})
	}
	if value, ok := pu.mutation.PillorderDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pillorder.FieldPillorderDate,
		})
	}
	if pu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.EmployeeTable,
			Columns: []string{pillorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.EmployeeTable,
			Columns: []string{pillorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PatientTable,
			Columns: []string{pillorder.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PatientTable,
			Columns: []string{pillorder.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DentistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.DentistTable,
			Columns: []string{pillorder.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DentistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.DentistTable,
			Columns: []string{pillorder.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PillorderitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PillorderitemTable,
			Columns: []string{pillorder.PillorderitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pillorderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PillorderitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PillorderitemTable,
			Columns: []string{pillorder.PillorderitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pillorderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pillorder.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PillorderUpdateOne is the builder for updating a single Pillorder entity.
type PillorderUpdateOne struct {
	config
	hooks    []Hook
	mutation *PillorderMutation
}

// SetPillorderNameID sets the PillorderNameID field.
func (puo *PillorderUpdateOne) SetPillorderNameID(s string) *PillorderUpdateOne {
	puo.mutation.SetPillorderNameID(s)
	return puo
}

// SetPillorderDate sets the PillorderDate field.
func (puo *PillorderUpdateOne) SetPillorderDate(t time.Time) *PillorderUpdateOne {
	puo.mutation.SetPillorderDate(t)
	return puo
}

// SetEmployeeID sets the employee edge to Employee by id.
func (puo *PillorderUpdateOne) SetEmployeeID(id int) *PillorderUpdateOne {
	puo.mutation.SetEmployeeID(id)
	return puo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (puo *PillorderUpdateOne) SetNillableEmployeeID(id *int) *PillorderUpdateOne {
	if id != nil {
		puo = puo.SetEmployeeID(*id)
	}
	return puo
}

// SetEmployee sets the employee edge to Employee.
func (puo *PillorderUpdateOne) SetEmployee(e *Employee) *PillorderUpdateOne {
	return puo.SetEmployeeID(e.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (puo *PillorderUpdateOne) SetPatientID(id int) *PillorderUpdateOne {
	puo.mutation.SetPatientID(id)
	return puo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (puo *PillorderUpdateOne) SetNillablePatientID(id *int) *PillorderUpdateOne {
	if id != nil {
		puo = puo.SetPatientID(*id)
	}
	return puo
}

// SetPatient sets the patient edge to Patient.
func (puo *PillorderUpdateOne) SetPatient(p *Patient) *PillorderUpdateOne {
	return puo.SetPatientID(p.ID)
}

// SetDentistID sets the dentist edge to Dentist by id.
func (puo *PillorderUpdateOne) SetDentistID(id int) *PillorderUpdateOne {
	puo.mutation.SetDentistID(id)
	return puo
}

// SetNillableDentistID sets the dentist edge to Dentist by id if the given value is not nil.
func (puo *PillorderUpdateOne) SetNillableDentistID(id *int) *PillorderUpdateOne {
	if id != nil {
		puo = puo.SetDentistID(*id)
	}
	return puo
}

// SetDentist sets the dentist edge to Dentist.
func (puo *PillorderUpdateOne) SetDentist(d *Dentist) *PillorderUpdateOne {
	return puo.SetDentistID(d.ID)
}

// SetPillorderitemID sets the pillorderitem edge to PillorderItem by id.
func (puo *PillorderUpdateOne) SetPillorderitemID(id int) *PillorderUpdateOne {
	puo.mutation.SetPillorderitemID(id)
	return puo
}

// SetNillablePillorderitemID sets the pillorderitem edge to PillorderItem by id if the given value is not nil.
func (puo *PillorderUpdateOne) SetNillablePillorderitemID(id *int) *PillorderUpdateOne {
	if id != nil {
		puo = puo.SetPillorderitemID(*id)
	}
	return puo
}

// SetPillorderitem sets the pillorderitem edge to PillorderItem.
func (puo *PillorderUpdateOne) SetPillorderitem(p *PillorderItem) *PillorderUpdateOne {
	return puo.SetPillorderitemID(p.ID)
}

// Mutation returns the PillorderMutation object of the builder.
func (puo *PillorderUpdateOne) Mutation() *PillorderMutation {
	return puo.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (puo *PillorderUpdateOne) ClearEmployee() *PillorderUpdateOne {
	puo.mutation.ClearEmployee()
	return puo
}

// ClearPatient clears the patient edge to Patient.
func (puo *PillorderUpdateOne) ClearPatient() *PillorderUpdateOne {
	puo.mutation.ClearPatient()
	return puo
}

// ClearDentist clears the dentist edge to Dentist.
func (puo *PillorderUpdateOne) ClearDentist() *PillorderUpdateOne {
	puo.mutation.ClearDentist()
	return puo
}

// ClearPillorderitem clears the pillorderitem edge to PillorderItem.
func (puo *PillorderUpdateOne) ClearPillorderitem() *PillorderUpdateOne {
	puo.mutation.ClearPillorderitem()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PillorderUpdateOne) Save(ctx context.Context) (*Pillorder, error) {
	if v, ok := puo.mutation.PillorderNameID(); ok {
		if err := pillorder.PillorderNameIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "PillorderNameID", err: fmt.Errorf("ent: validator failed for field \"PillorderNameID\": %w", err)}
		}
	}

	var (
		err  error
		node *Pillorder
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PillorderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PillorderUpdateOne) SaveX(ctx context.Context) *Pillorder {
	pi, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pi
}

// Exec executes the query on the entity.
func (puo *PillorderUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PillorderUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PillorderUpdateOne) sqlSave(ctx context.Context) (pi *Pillorder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pillorder.Table,
			Columns: pillorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pillorder.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pillorder.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PillorderNameID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pillorder.FieldPillorderNameID,
		})
	}
	if value, ok := puo.mutation.PillorderDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pillorder.FieldPillorderDate,
		})
	}
	if puo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.EmployeeTable,
			Columns: []string{pillorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.EmployeeTable,
			Columns: []string{pillorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PatientTable,
			Columns: []string{pillorder.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PatientTable,
			Columns: []string{pillorder.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DentistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.DentistTable,
			Columns: []string{pillorder.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DentistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.DentistTable,
			Columns: []string{pillorder.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PillorderitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PillorderitemTable,
			Columns: []string{pillorder.PillorderitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pillorderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PillorderitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PillorderitemTable,
			Columns: []string{pillorder.PillorderitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pillorderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pi = &Pillorder{config: puo.config}
	_spec.Assign = pi.assignValues
	_spec.ScanValues = pi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pillorder.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pi, nil
}
