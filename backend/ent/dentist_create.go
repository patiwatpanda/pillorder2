// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/patiwatpanda/app/ent/dentist"
	"github.com/patiwatpanda/app/ent/pillorder"
)

// DentistCreate is the builder for creating a Dentist entity.
type DentistCreate struct {
	config
	mutation *DentistMutation
	hooks    []Hook
}

// SetDentistName sets the Dentist_name field.
func (dc *DentistCreate) SetDentistName(s string) *DentistCreate {
	dc.mutation.SetDentistName(s)
	return dc
}

// AddPillorderIDs adds the pillorders edge to Pillorder by ids.
func (dc *DentistCreate) AddPillorderIDs(ids ...int) *DentistCreate {
	dc.mutation.AddPillorderIDs(ids...)
	return dc
}

// AddPillorders adds the pillorders edges to Pillorder.
func (dc *DentistCreate) AddPillorders(p ...*Pillorder) *DentistCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dc.AddPillorderIDs(ids...)
}

// Mutation returns the DentistMutation object of the builder.
func (dc *DentistCreate) Mutation() *DentistMutation {
	return dc.mutation
}

// Save creates the Dentist in the database.
func (dc *DentistCreate) Save(ctx context.Context) (*Dentist, error) {
	if _, ok := dc.mutation.DentistName(); !ok {
		return nil, &ValidationError{Name: "Dentist_name", err: errors.New("ent: missing required field \"Dentist_name\"")}
	}
	if v, ok := dc.mutation.DentistName(); ok {
		if err := dentist.DentistNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Dentist_name", err: fmt.Errorf("ent: validator failed for field \"Dentist_name\": %w", err)}
		}
	}
	var (
		err  error
		node *Dentist
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DentistCreate) SaveX(ctx context.Context) *Dentist {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DentistCreate) sqlSave(ctx context.Context) (*Dentist, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DentistCreate) createSpec() (*Dentist, *sqlgraph.CreateSpec) {
	var (
		d     = &Dentist{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dentist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentist.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.DentistName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldDentistName,
		})
		d.DentistName = value
	}
	if nodes := dc.mutation.PillordersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.PillordersTable,
			Columns: []string{dentist.PillordersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pillorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
