// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/patiwatpanda/app/ent/dentist"
	"github.com/patiwatpanda/app/ent/employee"
	"github.com/patiwatpanda/app/ent/patient"
	"github.com/patiwatpanda/app/ent/pillorder"
	"github.com/patiwatpanda/app/ent/pillorderitem"
)

// PillorderCreate is the builder for creating a Pillorder entity.
type PillorderCreate struct {
	config
	mutation *PillorderMutation
	hooks    []Hook
}

// SetPillorderNameID sets the PillorderNameID field.
func (pc *PillorderCreate) SetPillorderNameID(s string) *PillorderCreate {
	pc.mutation.SetPillorderNameID(s)
	return pc
}

// SetPillorderDate sets the PillorderDate field.
func (pc *PillorderCreate) SetPillorderDate(t time.Time) *PillorderCreate {
	pc.mutation.SetPillorderDate(t)
	return pc
}

// SetEmployeeID sets the employee edge to Employee by id.
func (pc *PillorderCreate) SetEmployeeID(id int) *PillorderCreate {
	pc.mutation.SetEmployeeID(id)
	return pc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (pc *PillorderCreate) SetNillableEmployeeID(id *int) *PillorderCreate {
	if id != nil {
		pc = pc.SetEmployeeID(*id)
	}
	return pc
}

// SetEmployee sets the employee edge to Employee.
func (pc *PillorderCreate) SetEmployee(e *Employee) *PillorderCreate {
	return pc.SetEmployeeID(e.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (pc *PillorderCreate) SetPatientID(id int) *PillorderCreate {
	pc.mutation.SetPatientID(id)
	return pc
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (pc *PillorderCreate) SetNillablePatientID(id *int) *PillorderCreate {
	if id != nil {
		pc = pc.SetPatientID(*id)
	}
	return pc
}

// SetPatient sets the patient edge to Patient.
func (pc *PillorderCreate) SetPatient(p *Patient) *PillorderCreate {
	return pc.SetPatientID(p.ID)
}

// SetDentistID sets the dentist edge to Dentist by id.
func (pc *PillorderCreate) SetDentistID(id int) *PillorderCreate {
	pc.mutation.SetDentistID(id)
	return pc
}

// SetNillableDentistID sets the dentist edge to Dentist by id if the given value is not nil.
func (pc *PillorderCreate) SetNillableDentistID(id *int) *PillorderCreate {
	if id != nil {
		pc = pc.SetDentistID(*id)
	}
	return pc
}

// SetDentist sets the dentist edge to Dentist.
func (pc *PillorderCreate) SetDentist(d *Dentist) *PillorderCreate {
	return pc.SetDentistID(d.ID)
}

// SetPillorderitemID sets the pillorderitem edge to PillorderItem by id.
func (pc *PillorderCreate) SetPillorderitemID(id int) *PillorderCreate {
	pc.mutation.SetPillorderitemID(id)
	return pc
}

// SetNillablePillorderitemID sets the pillorderitem edge to PillorderItem by id if the given value is not nil.
func (pc *PillorderCreate) SetNillablePillorderitemID(id *int) *PillorderCreate {
	if id != nil {
		pc = pc.SetPillorderitemID(*id)
	}
	return pc
}

// SetPillorderitem sets the pillorderitem edge to PillorderItem.
func (pc *PillorderCreate) SetPillorderitem(p *PillorderItem) *PillorderCreate {
	return pc.SetPillorderitemID(p.ID)
}

// Mutation returns the PillorderMutation object of the builder.
func (pc *PillorderCreate) Mutation() *PillorderMutation {
	return pc.mutation
}

// Save creates the Pillorder in the database.
func (pc *PillorderCreate) Save(ctx context.Context) (*Pillorder, error) {
	if _, ok := pc.mutation.PillorderNameID(); !ok {
		return nil, &ValidationError{Name: "PillorderNameID", err: errors.New("ent: missing required field \"PillorderNameID\"")}
	}
	if v, ok := pc.mutation.PillorderNameID(); ok {
		if err := pillorder.PillorderNameIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "PillorderNameID", err: fmt.Errorf("ent: validator failed for field \"PillorderNameID\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PillorderDate(); !ok {
		return nil, &ValidationError{Name: "PillorderDate", err: errors.New("ent: missing required field \"PillorderDate\"")}
	}
	var (
		err  error
		node *Pillorder
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PillorderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PillorderCreate) SaveX(ctx context.Context) *Pillorder {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PillorderCreate) sqlSave(ctx context.Context) (*Pillorder, error) {
	pi, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pi.ID = int(id)
	return pi, nil
}

func (pc *PillorderCreate) createSpec() (*Pillorder, *sqlgraph.CreateSpec) {
	var (
		pi    = &Pillorder{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pillorder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pillorder.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.PillorderNameID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pillorder.FieldPillorderNameID,
		})
		pi.PillorderNameID = value
	}
	if value, ok := pc.mutation.PillorderDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pillorder.FieldPillorderDate,
		})
		pi.PillorderDate = value
	}
	if nodes := pc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.EmployeeTable,
			Columns: []string{pillorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PatientTable,
			Columns: []string{pillorder.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DentistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.DentistTable,
			Columns: []string{pillorder.DentistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PillorderitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pillorder.PillorderitemTable,
			Columns: []string{pillorder.PillorderitemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pillorderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pi, _spec
}
