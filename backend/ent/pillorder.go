// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/patiwatpanda/app/ent/dentist"
	"github.com/patiwatpanda/app/ent/employee"
	"github.com/patiwatpanda/app/ent/patient"
	"github.com/patiwatpanda/app/ent/pillorder"
	"github.com/patiwatpanda/app/ent/pillorderitem"
)

// Pillorder is the model entity for the Pillorder schema.
type Pillorder struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PillorderNameID holds the value of the "PillorderNameID" field.
	PillorderNameID string `json:"PillorderNameID,omitempty"`
	// PillorderDate holds the value of the "PillorderDate" field.
	PillorderDate time.Time `json:"PillorderDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PillorderQuery when eager-loading is set.
	Edges            PillorderEdges `json:"edges"`
	dentist_id       *int
	employee_id      *int
	patient_id       *int
	pillorderitem_id *int
}

// PillorderEdges holds the relations/edges for other nodes in the graph.
type PillorderEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Dentist holds the value of the dentist edge.
	Dentist *Dentist
	// Pillorderitem holds the value of the pillorderitem edge.
	Pillorderitem *PillorderItem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PillorderEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PillorderEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// DentistOrErr returns the Dentist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PillorderEdges) DentistOrErr() (*Dentist, error) {
	if e.loadedTypes[2] {
		if e.Dentist == nil {
			// The edge dentist was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dentist.Label}
		}
		return e.Dentist, nil
	}
	return nil, &NotLoadedError{edge: "dentist"}
}

// PillorderitemOrErr returns the Pillorderitem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PillorderEdges) PillorderitemOrErr() (*PillorderItem, error) {
	if e.loadedTypes[3] {
		if e.Pillorderitem == nil {
			// The edge pillorderitem was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pillorderitem.Label}
		}
		return e.Pillorderitem, nil
	}
	return nil, &NotLoadedError{edge: "pillorderitem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pillorder) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PillorderNameID
		&sql.NullTime{},   // PillorderDate
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Pillorder) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // dentist_id
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // patient_id
		&sql.NullInt64{}, // pillorderitem_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pillorder fields.
func (pi *Pillorder) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pillorder.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pi.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PillorderNameID", values[0])
	} else if value.Valid {
		pi.PillorderNameID = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field PillorderDate", values[1])
	} else if value.Valid {
		pi.PillorderDate = value.Time
	}
	values = values[2:]
	if len(values) == len(pillorder.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field dentist_id", value)
		} else if value.Valid {
			pi.dentist_id = new(int)
			*pi.dentist_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			pi.employee_id = new(int)
			*pi.employee_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_id", value)
		} else if value.Valid {
			pi.patient_id = new(int)
			*pi.patient_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field pillorderitem_id", value)
		} else if value.Valid {
			pi.pillorderitem_id = new(int)
			*pi.pillorderitem_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the Pillorder.
func (pi *Pillorder) QueryEmployee() *EmployeeQuery {
	return (&PillorderClient{config: pi.config}).QueryEmployee(pi)
}

// QueryPatient queries the patient edge of the Pillorder.
func (pi *Pillorder) QueryPatient() *PatientQuery {
	return (&PillorderClient{config: pi.config}).QueryPatient(pi)
}

// QueryDentist queries the dentist edge of the Pillorder.
func (pi *Pillorder) QueryDentist() *DentistQuery {
	return (&PillorderClient{config: pi.config}).QueryDentist(pi)
}

// QueryPillorderitem queries the pillorderitem edge of the Pillorder.
func (pi *Pillorder) QueryPillorderitem() *PillorderItemQuery {
	return (&PillorderClient{config: pi.config}).QueryPillorderitem(pi)
}

// Update returns a builder for updating this Pillorder.
// Note that, you need to call Pillorder.Unwrap() before calling this method, if this Pillorder
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Pillorder) Update() *PillorderUpdateOne {
	return (&PillorderClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pi *Pillorder) Unwrap() *Pillorder {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pillorder is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Pillorder) String() string {
	var builder strings.Builder
	builder.WriteString("Pillorder(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", PillorderNameID=")
	builder.WriteString(pi.PillorderNameID)
	builder.WriteString(", PillorderDate=")
	builder.WriteString(pi.PillorderDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pillorders is a parsable slice of Pillorder.
type Pillorders []*Pillorder

func (pi Pillorders) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
