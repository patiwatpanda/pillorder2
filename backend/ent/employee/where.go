// Code generated by entc, DO NOT EDIT.

package employee

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/patiwatpanda/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EmployeeName applies equality check predicate on the "employee_name" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeName), v))
	})
}

// EmployeeEmail applies equality check predicate on the "employee_email" field. It's identical to EmployeeEmailEQ.
func EmployeeEmail(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeePassword applies equality check predicate on the "employee_password" field. It's identical to EmployeePasswordEQ.
func EmployeePassword(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeePassword), v))
	})
}

// EmployeeNameEQ applies the EQ predicate on the "employee_name" field.
func EmployeeNameEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameNEQ applies the NEQ predicate on the "employee_name" field.
func EmployeeNameNEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameIn applies the In predicate on the "employee_name" field.
func EmployeeNameIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeeName), v...))
	})
}

// EmployeeNameNotIn applies the NotIn predicate on the "employee_name" field.
func EmployeeNameNotIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeeName), v...))
	})
}

// EmployeeNameGT applies the GT predicate on the "employee_name" field.
func EmployeeNameGT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameGTE applies the GTE predicate on the "employee_name" field.
func EmployeeNameGTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameLT applies the LT predicate on the "employee_name" field.
func EmployeeNameLT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameLTE applies the LTE predicate on the "employee_name" field.
func EmployeeNameLTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameContains applies the Contains predicate on the "employee_name" field.
func EmployeeNameContains(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "employee_name" field.
func EmployeeNameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "employee_name" field.
func EmployeeNameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "employee_name" field.
func EmployeeNameEqualFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmployeeName), v))
	})
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "employee_name" field.
func EmployeeNameContainsFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmployeeName), v))
	})
}

// EmployeeEmailEQ applies the EQ predicate on the "employee_email" field.
func EmployeeEmailEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailNEQ applies the NEQ predicate on the "employee_email" field.
func EmployeeEmailNEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailIn applies the In predicate on the "employee_email" field.
func EmployeeEmailIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeeEmail), v...))
	})
}

// EmployeeEmailNotIn applies the NotIn predicate on the "employee_email" field.
func EmployeeEmailNotIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeeEmail), v...))
	})
}

// EmployeeEmailGT applies the GT predicate on the "employee_email" field.
func EmployeeEmailGT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailGTE applies the GTE predicate on the "employee_email" field.
func EmployeeEmailGTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailLT applies the LT predicate on the "employee_email" field.
func EmployeeEmailLT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailLTE applies the LTE predicate on the "employee_email" field.
func EmployeeEmailLTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailContains applies the Contains predicate on the "employee_email" field.
func EmployeeEmailContains(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailHasPrefix applies the HasPrefix predicate on the "employee_email" field.
func EmployeeEmailHasPrefix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailHasSuffix applies the HasSuffix predicate on the "employee_email" field.
func EmployeeEmailHasSuffix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailEqualFold applies the EqualFold predicate on the "employee_email" field.
func EmployeeEmailEqualFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeeEmailContainsFold applies the ContainsFold predicate on the "employee_email" field.
func EmployeeEmailContainsFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmployeeEmail), v))
	})
}

// EmployeePasswordEQ applies the EQ predicate on the "employee_password" field.
func EmployeePasswordEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordNEQ applies the NEQ predicate on the "employee_password" field.
func EmployeePasswordNEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordIn applies the In predicate on the "employee_password" field.
func EmployeePasswordIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeePassword), v...))
	})
}

// EmployeePasswordNotIn applies the NotIn predicate on the "employee_password" field.
func EmployeePasswordNotIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeePassword), v...))
	})
}

// EmployeePasswordGT applies the GT predicate on the "employee_password" field.
func EmployeePasswordGT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordGTE applies the GTE predicate on the "employee_password" field.
func EmployeePasswordGTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordLT applies the LT predicate on the "employee_password" field.
func EmployeePasswordLT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordLTE applies the LTE predicate on the "employee_password" field.
func EmployeePasswordLTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordContains applies the Contains predicate on the "employee_password" field.
func EmployeePasswordContains(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordHasPrefix applies the HasPrefix predicate on the "employee_password" field.
func EmployeePasswordHasPrefix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordHasSuffix applies the HasSuffix predicate on the "employee_password" field.
func EmployeePasswordHasSuffix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordEqualFold applies the EqualFold predicate on the "employee_password" field.
func EmployeePasswordEqualFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmployeePassword), v))
	})
}

// EmployeePasswordContainsFold applies the ContainsFold predicate on the "employee_password" field.
func EmployeePasswordContainsFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmployeePassword), v))
	})
}

// HasPillorders applies the HasEdge predicate on the "pillorders" edge.
func HasPillorders() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PillordersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PillordersTable, PillordersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPillordersWith applies the HasEdge predicate on the "pillorders" edge with a given conditions (other predicates).
func HasPillordersWith(preds ...predicate.Pillorder) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PillordersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PillordersTable, PillordersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		p(s.Not())
	})
}
