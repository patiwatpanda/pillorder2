// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/patiwatpanda/app/ent/pillorderitem"
)

// PillorderItem is the model entity for the PillorderItem schema.
type PillorderItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PillorderItemName holds the value of the "PillorderItem_name" field.
	PillorderItemName string `json:"PillorderItem_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PillorderItemQuery when eager-loading is set.
	Edges PillorderItemEdges `json:"edges"`
}

// PillorderItemEdges holds the relations/edges for other nodes in the graph.
type PillorderItemEdges struct {
	// Pillorders holds the value of the pillorders edge.
	Pillorders []*Pillorder
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PillordersOrErr returns the Pillorders value or an error if the edge
// was not loaded in eager-loading.
func (e PillorderItemEdges) PillordersOrErr() ([]*Pillorder, error) {
	if e.loadedTypes[0] {
		return e.Pillorders, nil
	}
	return nil, &NotLoadedError{edge: "pillorders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PillorderItem) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PillorderItem_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PillorderItem fields.
func (pi *PillorderItem) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pillorderitem.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pi.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PillorderItem_name", values[0])
	} else if value.Valid {
		pi.PillorderItemName = value.String
	}
	return nil
}

// QueryPillorders queries the pillorders edge of the PillorderItem.
func (pi *PillorderItem) QueryPillorders() *PillorderQuery {
	return (&PillorderItemClient{config: pi.config}).QueryPillorders(pi)
}

// Update returns a builder for updating this PillorderItem.
// Note that, you need to call PillorderItem.Unwrap() before calling this method, if this PillorderItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PillorderItem) Update() *PillorderItemUpdateOne {
	return (&PillorderItemClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pi *PillorderItem) Unwrap() *PillorderItem {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PillorderItem is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PillorderItem) String() string {
	var builder strings.Builder
	builder.WriteString("PillorderItem(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", PillorderItem_name=")
	builder.WriteString(pi.PillorderItemName)
	builder.WriteByte(')')
	return builder.String()
}

// PillorderItems is a parsable slice of PillorderItem.
type PillorderItems []*PillorderItem

func (pi PillorderItems) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
