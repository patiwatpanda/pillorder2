// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/patiwatpanda/app/ent/migrate"

	"github.com/patiwatpanda/app/ent/dentist"
	"github.com/patiwatpanda/app/ent/employee"
	"github.com/patiwatpanda/app/ent/patient"
	"github.com/patiwatpanda/app/ent/pillorder"
	"github.com/patiwatpanda/app/ent/pillorderitem"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Dentist is the client for interacting with the Dentist builders.
	Dentist *DentistClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Pillorder is the client for interacting with the Pillorder builders.
	Pillorder *PillorderClient
	// PillorderItem is the client for interacting with the PillorderItem builders.
	PillorderItem *PillorderItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Dentist = NewDentistClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Pillorder = NewPillorderClient(c.config)
	c.PillorderItem = NewPillorderItemClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Dentist:       NewDentistClient(cfg),
		Employee:      NewEmployeeClient(cfg),
		Patient:       NewPatientClient(cfg),
		Pillorder:     NewPillorderClient(cfg),
		PillorderItem: NewPillorderItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Dentist:       NewDentistClient(cfg),
		Employee:      NewEmployeeClient(cfg),
		Patient:       NewPatientClient(cfg),
		Pillorder:     NewPillorderClient(cfg),
		PillorderItem: NewPillorderItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Dentist.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Dentist.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Pillorder.Use(hooks...)
	c.PillorderItem.Use(hooks...)
}

// DentistClient is a client for the Dentist schema.
type DentistClient struct {
	config
}

// NewDentistClient returns a client for the Dentist from the given config.
func NewDentistClient(c config) *DentistClient {
	return &DentistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dentist.Hooks(f(g(h())))`.
func (c *DentistClient) Use(hooks ...Hook) {
	c.hooks.Dentist = append(c.hooks.Dentist, hooks...)
}

// Create returns a create builder for Dentist.
func (c *DentistClient) Create() *DentistCreate {
	mutation := newDentistMutation(c.config, OpCreate)
	return &DentistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Dentist.
func (c *DentistClient) Update() *DentistUpdate {
	mutation := newDentistMutation(c.config, OpUpdate)
	return &DentistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DentistClient) UpdateOne(d *Dentist) *DentistUpdateOne {
	mutation := newDentistMutation(c.config, OpUpdateOne, withDentist(d))
	return &DentistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DentistClient) UpdateOneID(id int) *DentistUpdateOne {
	mutation := newDentistMutation(c.config, OpUpdateOne, withDentistID(id))
	return &DentistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dentist.
func (c *DentistClient) Delete() *DentistDelete {
	mutation := newDentistMutation(c.config, OpDelete)
	return &DentistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DentistClient) DeleteOne(d *Dentist) *DentistDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DentistClient) DeleteOneID(id int) *DentistDeleteOne {
	builder := c.Delete().Where(dentist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DentistDeleteOne{builder}
}

// Create returns a query builder for Dentist.
func (c *DentistClient) Query() *DentistQuery {
	return &DentistQuery{config: c.config}
}

// Get returns a Dentist entity by its id.
func (c *DentistClient) Get(ctx context.Context, id int) (*Dentist, error) {
	return c.Query().Where(dentist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DentistClient) GetX(ctx context.Context, id int) *Dentist {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryPillorders queries the pillorders edge of a Dentist.
func (c *DentistClient) QueryPillorders(d *Dentist) *PillorderQuery {
	query := &PillorderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dentist.Table, dentist.FieldID, id),
			sqlgraph.To(pillorder.Table, pillorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dentist.PillordersTable, dentist.PillordersColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DentistClient) Hooks() []Hook {
	return c.hooks.Dentist
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryPillorders queries the pillorders edge of a Employee.
func (c *EmployeeClient) QueryPillorders(e *Employee) *PillorderQuery {
	query := &PillorderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(pillorder.Table, pillorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.PillordersTable, employee.PillordersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPillorders queries the pillorders edge of a Patient.
func (c *PatientClient) QueryPillorders(pa *Patient) *PillorderQuery {
	query := &PillorderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(pillorder.Table, pillorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PillordersTable, patient.PillordersColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PillorderClient is a client for the Pillorder schema.
type PillorderClient struct {
	config
}

// NewPillorderClient returns a client for the Pillorder from the given config.
func NewPillorderClient(c config) *PillorderClient {
	return &PillorderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pillorder.Hooks(f(g(h())))`.
func (c *PillorderClient) Use(hooks ...Hook) {
	c.hooks.Pillorder = append(c.hooks.Pillorder, hooks...)
}

// Create returns a create builder for Pillorder.
func (c *PillorderClient) Create() *PillorderCreate {
	mutation := newPillorderMutation(c.config, OpCreate)
	return &PillorderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Pillorder.
func (c *PillorderClient) Update() *PillorderUpdate {
	mutation := newPillorderMutation(c.config, OpUpdate)
	return &PillorderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PillorderClient) UpdateOne(pi *Pillorder) *PillorderUpdateOne {
	mutation := newPillorderMutation(c.config, OpUpdateOne, withPillorder(pi))
	return &PillorderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PillorderClient) UpdateOneID(id int) *PillorderUpdateOne {
	mutation := newPillorderMutation(c.config, OpUpdateOne, withPillorderID(id))
	return &PillorderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pillorder.
func (c *PillorderClient) Delete() *PillorderDelete {
	mutation := newPillorderMutation(c.config, OpDelete)
	return &PillorderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PillorderClient) DeleteOne(pi *Pillorder) *PillorderDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PillorderClient) DeleteOneID(id int) *PillorderDeleteOne {
	builder := c.Delete().Where(pillorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PillorderDeleteOne{builder}
}

// Create returns a query builder for Pillorder.
func (c *PillorderClient) Query() *PillorderQuery {
	return &PillorderQuery{config: c.config}
}

// Get returns a Pillorder entity by its id.
func (c *PillorderClient) Get(ctx context.Context, id int) (*Pillorder, error) {
	return c.Query().Where(pillorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PillorderClient) GetX(ctx context.Context, id int) *Pillorder {
	pi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pi
}

// QueryEmployee queries the employee edge of a Pillorder.
func (c *PillorderClient) QueryEmployee(pi *Pillorder) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pillorder.Table, pillorder.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pillorder.EmployeeTable, pillorder.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Pillorder.
func (c *PillorderClient) QueryPatient(pi *Pillorder) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pillorder.Table, pillorder.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pillorder.PatientTable, pillorder.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDentist queries the dentist edge of a Pillorder.
func (c *PillorderClient) QueryDentist(pi *Pillorder) *DentistQuery {
	query := &DentistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pillorder.Table, pillorder.FieldID, id),
			sqlgraph.To(dentist.Table, dentist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pillorder.DentistTable, pillorder.DentistColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPillorderitem queries the pillorderitem edge of a Pillorder.
func (c *PillorderClient) QueryPillorderitem(pi *Pillorder) *PillorderItemQuery {
	query := &PillorderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pillorder.Table, pillorder.FieldID, id),
			sqlgraph.To(pillorderitem.Table, pillorderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pillorder.PillorderitemTable, pillorder.PillorderitemColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PillorderClient) Hooks() []Hook {
	return c.hooks.Pillorder
}

// PillorderItemClient is a client for the PillorderItem schema.
type PillorderItemClient struct {
	config
}

// NewPillorderItemClient returns a client for the PillorderItem from the given config.
func NewPillorderItemClient(c config) *PillorderItemClient {
	return &PillorderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pillorderitem.Hooks(f(g(h())))`.
func (c *PillorderItemClient) Use(hooks ...Hook) {
	c.hooks.PillorderItem = append(c.hooks.PillorderItem, hooks...)
}

// Create returns a create builder for PillorderItem.
func (c *PillorderItemClient) Create() *PillorderItemCreate {
	mutation := newPillorderItemMutation(c.config, OpCreate)
	return &PillorderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for PillorderItem.
func (c *PillorderItemClient) Update() *PillorderItemUpdate {
	mutation := newPillorderItemMutation(c.config, OpUpdate)
	return &PillorderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PillorderItemClient) UpdateOne(pi *PillorderItem) *PillorderItemUpdateOne {
	mutation := newPillorderItemMutation(c.config, OpUpdateOne, withPillorderItem(pi))
	return &PillorderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PillorderItemClient) UpdateOneID(id int) *PillorderItemUpdateOne {
	mutation := newPillorderItemMutation(c.config, OpUpdateOne, withPillorderItemID(id))
	return &PillorderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PillorderItem.
func (c *PillorderItemClient) Delete() *PillorderItemDelete {
	mutation := newPillorderItemMutation(c.config, OpDelete)
	return &PillorderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PillorderItemClient) DeleteOne(pi *PillorderItem) *PillorderItemDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PillorderItemClient) DeleteOneID(id int) *PillorderItemDeleteOne {
	builder := c.Delete().Where(pillorderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PillorderItemDeleteOne{builder}
}

// Create returns a query builder for PillorderItem.
func (c *PillorderItemClient) Query() *PillorderItemQuery {
	return &PillorderItemQuery{config: c.config}
}

// Get returns a PillorderItem entity by its id.
func (c *PillorderItemClient) Get(ctx context.Context, id int) (*PillorderItem, error) {
	return c.Query().Where(pillorderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PillorderItemClient) GetX(ctx context.Context, id int) *PillorderItem {
	pi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pi
}

// QueryPillorders queries the pillorders edge of a PillorderItem.
func (c *PillorderItemClient) QueryPillorders(pi *PillorderItem) *PillorderQuery {
	query := &PillorderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pillorderitem.Table, pillorderitem.FieldID, id),
			sqlgraph.To(pillorder.Table, pillorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pillorderitem.PillordersTable, pillorderitem.PillordersColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PillorderItemClient) Hooks() []Hook {
	return c.hooks.PillorderItem
}
