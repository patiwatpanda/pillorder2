// Code generated by entc, DO NOT EDIT.

package pillorder

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/patiwatpanda/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PillorderNameID applies equality check predicate on the "PillorderNameID" field. It's identical to PillorderNameIDEQ.
func PillorderNameID(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPillorderNameID), v))
	})
}

// PillorderDate applies equality check predicate on the "PillorderDate" field. It's identical to PillorderDateEQ.
func PillorderDate(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPillorderDate), v))
	})
}

// PillorderNameIDEQ applies the EQ predicate on the "PillorderNameID" field.
func PillorderNameIDEQ(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDNEQ applies the NEQ predicate on the "PillorderNameID" field.
func PillorderNameIDNEQ(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDIn applies the In predicate on the "PillorderNameID" field.
func PillorderNameIDIn(vs ...string) predicate.Pillorder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pillorder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPillorderNameID), v...))
	})
}

// PillorderNameIDNotIn applies the NotIn predicate on the "PillorderNameID" field.
func PillorderNameIDNotIn(vs ...string) predicate.Pillorder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pillorder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPillorderNameID), v...))
	})
}

// PillorderNameIDGT applies the GT predicate on the "PillorderNameID" field.
func PillorderNameIDGT(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDGTE applies the GTE predicate on the "PillorderNameID" field.
func PillorderNameIDGTE(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDLT applies the LT predicate on the "PillorderNameID" field.
func PillorderNameIDLT(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDLTE applies the LTE predicate on the "PillorderNameID" field.
func PillorderNameIDLTE(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDContains applies the Contains predicate on the "PillorderNameID" field.
func PillorderNameIDContains(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDHasPrefix applies the HasPrefix predicate on the "PillorderNameID" field.
func PillorderNameIDHasPrefix(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDHasSuffix applies the HasSuffix predicate on the "PillorderNameID" field.
func PillorderNameIDHasSuffix(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDEqualFold applies the EqualFold predicate on the "PillorderNameID" field.
func PillorderNameIDEqualFold(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPillorderNameID), v))
	})
}

// PillorderNameIDContainsFold applies the ContainsFold predicate on the "PillorderNameID" field.
func PillorderNameIDContainsFold(v string) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPillorderNameID), v))
	})
}

// PillorderDateEQ applies the EQ predicate on the "PillorderDate" field.
func PillorderDateEQ(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPillorderDate), v))
	})
}

// PillorderDateNEQ applies the NEQ predicate on the "PillorderDate" field.
func PillorderDateNEQ(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPillorderDate), v))
	})
}

// PillorderDateIn applies the In predicate on the "PillorderDate" field.
func PillorderDateIn(vs ...time.Time) predicate.Pillorder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pillorder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPillorderDate), v...))
	})
}

// PillorderDateNotIn applies the NotIn predicate on the "PillorderDate" field.
func PillorderDateNotIn(vs ...time.Time) predicate.Pillorder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pillorder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPillorderDate), v...))
	})
}

// PillorderDateGT applies the GT predicate on the "PillorderDate" field.
func PillorderDateGT(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPillorderDate), v))
	})
}

// PillorderDateGTE applies the GTE predicate on the "PillorderDate" field.
func PillorderDateGTE(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPillorderDate), v))
	})
}

// PillorderDateLT applies the LT predicate on the "PillorderDate" field.
func PillorderDateLT(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPillorderDate), v))
	})
}

// PillorderDateLTE applies the LTE predicate on the "PillorderDate" field.
func PillorderDateLTE(v time.Time) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPillorderDate), v))
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDentist applies the HasEdge predicate on the "dentist" edge.
func HasDentist() predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentistTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DentistTable, DentistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDentistWith applies the HasEdge predicate on the "dentist" edge with a given conditions (other predicates).
func HasDentistWith(preds ...predicate.Dentist) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentistInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DentistTable, DentistColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPillorderitem applies the HasEdge predicate on the "pillorderitem" edge.
func HasPillorderitem() predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PillorderitemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PillorderitemTable, PillorderitemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPillorderitemWith applies the HasEdge predicate on the "pillorderitem" edge with a given conditions (other predicates).
func HasPillorderitemWith(preds ...predicate.PillorderItem) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PillorderitemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PillorderitemTable, PillorderitemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Pillorder) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Pillorder) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pillorder) predicate.Pillorder {
	return predicate.Pillorder(func(s *sql.Selector) {
		p(s.Not())
	})
}
